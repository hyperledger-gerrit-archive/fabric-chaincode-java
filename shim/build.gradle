/*
 * Copyright IBM Corp. 2017 All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'maven-publish'

// apply plugin: 'com.google.osdetector'

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
	}
}

protobuf {
	protoc {
		// download the protobuf compiler
		artifact = 'com.google.protobuf:protoc:3.0.0'
	}
	plugins {
		// define grpc plugin for the protobuf compiler
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.6.1'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			// apply the grpc plugin for the protobuf compiler
			grpc {}
		}
	}
}

sourceSets {
	main {
		java {
			// adding the protobuf & grpc generated source explicitly,
			// so that IDEs can find the generated sources.
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}

dependencies {
	compile 'com.google.protobuf:protobuf-java:3.0.0'
	compile 'com.google.protobuf:protobuf-java-util:3.0.0'
	compile 'io.grpc:grpc-netty:1.6.1'
	compile 'io.grpc:grpc-protobuf:1.6.1'
	compile 'io.grpc:grpc-stub:1.6.1'
	compile 'commons-cli:commons-cli:1.3.1'
	compile 'commons-logging:commons-logging:1.2'
//	runtime 'io.netty:netty-tcnative-boringssl-static:1.1.33.Fork21:' + tcnative_classifier
	testCompile 'junit:junit:4.12'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	testCompile "org.mockito:mockito-core:2.+"
}

archivesBaseName = 'shim-client'

// always plugin in to maven local
build.finalizedBy(publishToMavenLocal)

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId 'org.hyperledger'
			artifactId 'shim-client'
			from components.java
		}
	}
}

task licenseCheck {
	group = "license"
	description = "Checks the License part of each source file"

	println "Checking Licences..."
	def noSPDX = new LinkedList<File>()
	def illegals = new LinkedList<File>()
	sourceSets.forEach {
		sourceSet ->
			sourceSet.allSource.findAll { !it.absolutePath.contains("proto") }.each {
				file ->
					BufferedReader r = new BufferedReader(new FileReader(file))
					def line, builder = new StringBuilder()
					while((line = r.readLine()) != null) {
						builder.append(line)
					}
					line = builder.toString()
					if(!line.contains("SPDX-License-Identifier")) {
						noSPDX.add(file)
						if(!line.contains("http://www.apache.org/licenses/LICENSE-2.0")) {
							illegals.add(file)
						}
					}
			}
	}

	if(!illegals.isEmpty()) {
		def error = "The following files are missing traditional Apache 2.0 headers:\n"
		illegals.each {
			f -> error += f.getPath() + "\n"
		}
		error += "Fatal Error - All files must have a license header"
		throw new IllegalArgumentException(error)
	}

	if(noSPDX.isEmpty()) {
		println "All remaining files have Apache 2.0 headers"
	} else {
		println "The following files are missing SPDX-License-Identifier headers:"
		noSPDX.each {
			f -> println f.getPath()
		}
		println "Please replace the Apache license header comment text with:"
		println "SPDX-License-Identifier: Apache-2.0"
	}
}

build.dependsOn licenseCheck